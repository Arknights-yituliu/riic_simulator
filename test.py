#!/usr/bin/env python3
import unittest

from riic_simulator.base import Base
from riic_simulator.facility import *
from riic_simulator.operator import *


class TestBase(unittest.TestCase):
    def test_electricity_252(self):
        base = Base()
        ControlCenter(base, level=5)
        PowerPlant(base, level=3, location="B103")
        PowerPlant(base, level=3, location="B203")
        TradingPost(base, level=2, location="B101")
        TradingPost(base, level=3, location="B102")
        Factory(base, level=3, location="B201")
        Factory(base, level=3, location="B202")
        Factory(base, level=2, location="B301")
        Factory(base, level=2, location="B302")
        Factory(base, level=2, location="B303")
        Dormitory(base, level=2)
        Dormitory(base, level=1)
        Dormitory(base, level=1)
        Dormitory(base, level=1)
        ReceptionRoom(base, level=3)
        Workshop(base, level=3)
        Office(base, level=3)
        TrainingRoom(base, level=3)
        self.assertEqual(base.electricity, 540)
        self.assertEqual(base.electricity_limit, 540)

    def test_electricity_243(self):
        base = Base()
        ControlCenter(base, level=5)
        PowerPlant(base, level=3, location="B103")
        PowerPlant(base, level=3, location="B203")
        PowerPlant(base, level=3, location="B303")
        TradingPost(base, level=3, location="B101")
        TradingPost(base, level=3, location="B102")
        Factory(base, level=3, location="B201")
        Factory(base, level=3, location="B202")
        Factory(base, level=3, location="B301")
        Factory(base, level=3, location="B302")
        Dormitory(base, level=5)
        Dormitory(base, level=5)
        Dormitory(base, level=5)
        Dormitory(base, level=5)
        ReceptionRoom(base, level=3)
        Workshop(base, level=3)
        Office(base, level=3)
        TrainingRoom(base, level=3)
        self.assertEqual(base.electricity, 810)
        self.assertEqual(base.electricity_limit, 810)

    def test_factory_single(self):
        base = Base()
        factory = Factory(base, level=3, location="B101")
        self.assertEqual(factory.extra["speed"]["value"], 0)
        mayer = Mayer()
        mayer.put(factory)
        self.assertEqual(factory.extra["speed"]["value"], 131)
        mayer.remove()
        self.assertEqual(factory.extra["speed"]["value"], 0)

    def test_factory_multiple(self):
        base = Base()
        factory = Factory(base, level=3, location="B101")
        self.assertEqual(factory.extra["speed"]["value"], 0)
        dorothy = Dorothy()
        dorothy.put(factory)
        self.assertEqual(factory.extra["speed"]["value"], 131)
        ptilopsis = Ptilopsis()
        ptilopsis.put(factory)
        self.assertEqual(factory.extra["speed"]["value"], 162)
        dorothy.remove()
        self.assertEqual(factory.extra["speed"]["value"], 126)
        ptilopsis.remove()

    def test_trading_post_single(self):
        base = Base()
        trading_post = TradingPost(base, level=3, location="B101")
        self.assertEqual(trading_post.extra["speed"]["value"], 0)
        sora = Sora()
        sora.put(trading_post)
        self.assertEqual(trading_post.extra["speed"]["value"], 131)
        sora.remove()
        self.assertEqual(trading_post.extra["speed"]["value"], 0)

    def test_trading_post_multiple(self):
        base = Base()
        trading_post = TradingPost(base, level=3, location="B101")
        jaye = Jaye()
        lappy = Lappland()
        texas = Texas()
        jaye.put(trading_post)
        self.assertEqual(trading_post.extra["speed"]["value"], 141)
        lappy.put(trading_post)
        self.assertEqual(trading_post.extra["speed"]["value"], 142)
        texas.put(trading_post)
        self.assertEqual(trading_post.extra["speed"]["value"], 200)
        lappy.remove()
        self.assertEqual(trading_post.extra["speed"]["value"], 142)
        jaye.remove()
        texas.remove()

    def test_base_attribute(self):
        base = Base()
        control_center = ControlCenter(base, level=5)
        trading_post = TradingPost(base, level=3, location="B101")
        cats = TerraResearchCommission()
        cats.put(trading_post)
        self.assertEqual(base.extra["木天蓼"]["value"], 0)
        self.assertEqual(trading_post.extra["speed"]["value"], 106)
        yato = KirinXYato()
        yato.put(control_center)
        self.assertEqual(base.extra["木天蓼"]["value"], 8)
        self.assertEqual(trading_post.extra["speed"]["value"], 130)
        noir_corne = RathalosSNoirCorne()
        noir_corne.put(control_center)
        self.assertEqual(base.extra["木天蓼"]["value"], 12)
        self.assertEqual(trading_post.extra["speed"]["value"], 142)
        yato.remove()
        self.assertEqual(base.extra["木天蓼"]["value"], 2)
        self.assertEqual(trading_post.extra["speed"]["value"], 112)
